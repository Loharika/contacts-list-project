{"ast":null,"code":"var _jsxFileName = \"/home/apiiit-rkv/Desktop/contacts-project/src/components/AllContacts/index.js\";\nimport { Component } from 'react';\nimport Contact from '../Contact';\nimport Filters from '../Filters';\nimport NoContacts from '../NoContacts';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'All',\n  label: 'All'\n}, {\n  value: 'Personal',\n  label: 'Personal'\n}, {\n  value: 'Business',\n  label: 'Business'\n}];\n\nclass AllContacts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allContacts: [],\n      contactType: options[0].value\n    };\n\n    this.getContacts = () => {\n      const {\n        contactType\n      } = this.state;\n      const previousContacts = localStorage.getItem(\"contacts\");\n\n      if (previousContacts === null) {\n        this.setState({\n          allContacts: []\n        });\n      } else {\n        const currentContacts = JSON.parse(previousContacts);\n        const formattedContacts = currentContacts.map(eachContact => this.getFormattedContact(eachContact));\n\n        if (contactType === 'All') {\n          this.setState({\n            allContacts: [...formattedContacts]\n          });\n        } else {\n          const filteredContacts = this.displayFilteredContacts(formattedContacts);\n          this.setState({\n            allContacts: [...filteredContacts]\n          });\n        }\n      }\n    };\n\n    this.getFormattedContact = contactDetails => {\n      return {\n        id: contactDetails.id,\n        name: contactDetails.name,\n        email: contactDetails.email,\n        contactType: contactDetails.contact_type,\n        contactNumber: contactDetails.contact_number\n      };\n    };\n\n    this.onChangeContactType = event => {\n      this.setState({\n        contactType: event.value\n      }, this.getContacts);\n    };\n\n    this.displayFilteredContacts = formattedContacts => {\n      const {\n        contactType\n      } = this.state;\n      const filteredContacts = formattedContacts.filter(contact => contact.contactType === contactType);\n      return filteredContacts;\n    };\n\n    this.renderContactsUI = () => {\n      const {\n        allContacts\n      } = this.state;\n      return allContacts.map(contact => /*#__PURE__*/_jsxDEV(Contact, {\n        contactDetails: contact,\n        onDeleteContact: this.onDeleteContact,\n        onUpdateContact: this.onUpdateContact\n      }, contact.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 38\n      }, this));\n    };\n\n    this.onDeleteContact = contactId => {\n      const currentContacts = JSON.parse(localStorage.getItem('contacts'));\n      const updatedContacts = currentContacts.filter(contact => contact.id !== contactId);\n      localStorage.setItem('contacts', JSON.stringify(updatedContacts));\n      this.getContacts();\n    };\n\n    this.noContactDisplayText = () => {\n      let displayText;\n      const {\n        contactType\n      } = this.state;\n\n      switch (contactType) {\n        case 'Personal':\n          displayText = \"Personal\";\n          break;\n\n        case 'Business':\n          displayText = \"Business\";\n          break;\n\n        default:\n          displayText = \"\";\n          break;\n      }\n\n      return displayText;\n    };\n  }\n\n  componentDidMount() {\n    this.getContacts();\n  }\n\n  render() {\n    const {\n      allContacts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-main-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contacts-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"all-contacts-heading\",\n          children: \"All Contacts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-type-filters-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"contact-type-filters\",\n            children: /*#__PURE__*/_jsxDEV(Filters, {\n              options: options,\n              onChangeContactType: this.onChangeContactType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"contacts-list\",\n          children: allContacts.length !== 0 ? this.renderContactsUI() : /*#__PURE__*/_jsxDEV(NoContacts, {\n            displayText: this.noContactDisplayText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AllContacts;","map":{"version":3,"sources":["/home/apiiit-rkv/Desktop/contacts-project/src/components/AllContacts/index.js"],"names":["Component","Contact","Filters","NoContacts","options","value","label","AllContacts","state","allContacts","contactType","getContacts","previousContacts","localStorage","getItem","setState","currentContacts","JSON","parse","formattedContacts","map","eachContact","getFormattedContact","filteredContacts","displayFilteredContacts","contactDetails","id","name","email","contact_type","contactNumber","contact_number","onChangeContactType","event","filter","contact","renderContactsUI","onDeleteContact","onUpdateContact","contactId","updatedContacts","setItem","stringify","noContactDisplayText","displayText","componentDidMount","render","length"],"mappings":"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","sourcesContent":["import {Component} from 'react'\nimport Contact from '../Contact';\nimport Filters from '../Filters';\nimport NoContacts from '../NoContacts';\nimport './index.css'\n\nconst options=[\n    { value: 'All', label: 'All' },\n    { value: 'Personal', label: 'Personal' },\n    { value: 'Business', label: 'Business' },\n]\n\n\nclass AllContacts extends Component{\n    state={\n        allContacts:[],\n        contactType:options[0].value\n    }\n    componentDidMount(){\n    this.getContacts()\n    }\n\n    getContacts=()=>{\n        const {contactType}=this.state\n        const previousContacts=localStorage.getItem(\"contacts\");\n        if(previousContacts===null){\n            this.setState({allContacts:[]})\n        }\n        else{\n            const currentContacts=JSON.parse(previousContacts)\n            const formattedContacts=currentContacts.map(eachContact=>this.getFormattedContact(eachContact))\n            if(contactType==='All'){\n                this.setState({allContacts:[...formattedContacts]})\n            }\n            else{\n                const filteredContacts=this.displayFilteredContacts(formattedContacts)\n                this.setState({allContacts:[...filteredContacts]})\n            }\n        }\n    }\n\n    getFormattedContact=(contactDetails)=>{\n        return {\n            id:contactDetails.id,\n            name:contactDetails.name,\n            email:contactDetails.email,\n            contactType:contactDetails.contact_type,\n            contactNumber:contactDetails.contact_number\n        }\n    }\n    onChangeContactType=(event)=>{\n        this.setState({contactType:event.value},this.getContacts)\n    }\n    displayFilteredContacts=(formattedContacts)=>{\n        const {contactType}=this.state\n        const filteredContacts=formattedContacts.filter(contact=>contact.contactType===contactType)\n        return filteredContacts\n    }\n    renderContactsUI=()=>{\n        const {allContacts}=this.state\n        return (\n            allContacts.map(contact=><Contact \n                key={contact.id} \n                contactDetails={contact}\n                onDeleteContact={this.onDeleteContact} \n                onUpdateContact={this.onUpdateContact}\n                />)\n        )\n    }\n    onDeleteContact=(contactId)=>{\n        const currentContacts=JSON.parse(localStorage.getItem('contacts'))\n        const updatedContacts=currentContacts.filter(contact=>contact.id!==contactId)\n        localStorage.setItem('contacts',JSON.stringify(updatedContacts))\n        this.getContacts()\n    }\n    noContactDisplayText=()=>{\n        let displayText;\n        const {contactType}=this.state\n        switch (contactType) {\n            case 'Personal':\n                displayText = \"Personal\";\n                break;\n            case 'Business':\n                displayText = \"Business\";\n                break;\n            default:\n                displayText = \"\";\n              break;\n          }\n          return displayText\n    }\n    render(){\n        const {allContacts}=this.state\n        return (\n            <div className=\"contact-main-container\" >\n                <div className=\"contacts-container\">\n            <h1 className=\"all-contacts-heading\">All Contacts</h1>\n            <div className=\"contact-type-filters-container\">\n                <div className=\"contact-type-filters\">\n                    <Filters options={options} onChangeContactType={this.onChangeContactType}/>\n                </div>\n            </div>\n            <ul className=\"contacts-list\">\n            {allContacts.length!==0?this.renderContactsUI():<NoContacts displayText={this.noContactDisplayText()} />}</ul>\n            </div>\n            </div>\n            \n        )\n    }\n}\nexport default AllContacts"]},"metadata":{},"sourceType":"module"}