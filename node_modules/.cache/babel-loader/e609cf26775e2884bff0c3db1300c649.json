{"ast":null,"code":"var _jsxFileName = \"/home/apiiit-rkv/Desktop/contacts-project/src/components/UpdateContact/index.js\";\nimport { withRouter } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport emailRegex from 'email-regex';\nimport { Component } from 'react';\nimport Header from '../Header';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateContact extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: '',\n      name: '',\n      email: '',\n      contactNumber: '',\n      contactType: '',\n      showSubmitError: false,\n      errorText: \"Please fill required details\"\n    };\n\n    this.componentDidMount = () => {\n      const {\n        match\n      } = this.props;\n      const {\n        params\n      } = match;\n      const {\n        id: contactId\n      } = params;\n      const selectedContactDetails = JSON.parse(localStorage.getItem('contacts')).find(contact => contact.id === contactId);\n      this.setState({\n        id: selectedContactDetails.id,\n        name: selectedContactDetails.name,\n        email: selectedContactDetails.email,\n        contactType: selectedContactDetails.contact_type,\n        contactNumber: selectedContactDetails.contact_number\n      });\n    };\n\n    this.onChangeName = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.onChangeEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.onChangeContactNumber = event => {\n      this.setState({\n        contactNumber: event.target.value\n      });\n    };\n\n    this.onSelectContactType = event => {\n      const {\n        value\n      } = event.target;\n      this.setState({\n        contactType: value\n      });\n    };\n\n    this.renderNameField = () => {\n      const {\n        name\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"name\",\n          children: \"NAME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          className: \"name-input-field\",\n          value: name,\n          onChange: this.onChangeName,\n          placeholder: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderEmailField = () => {\n      const {\n        email\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"email\",\n          children: \"EMAIL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"email\",\n          className: \"email-input-field\",\n          value: email,\n          onChange: this.onChangeEmail,\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderContactNumberField = () => {\n      const {\n        contactNumber\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"contactNumber\",\n          children: \"CONTACT NUMBER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"contactNumber\",\n          className: \"contact-number-input-field\",\n          value: contactNumber,\n          onChange: this.onChangeContactNumber,\n          placeholder: \"Contact Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderContactTypeOptions = () => {\n      const {\n        contactType\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-details\",\n        name: \"contactTypeOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"contact-type\",\n          children: \"CONTACT TYPE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-type-option\",\n          children: [\"\\xA0 \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: \"business\",\n            name: \"contactType\",\n            checked: contactType === 'Business',\n            className: \"contact-type-radio-button\",\n            value: \"Business\",\n            onChange: this.onSelectContactType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), \"\\xA0 \", /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"business\",\n            className: \"contact-type-label\",\n            children: \"Business\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contact-type-option\",\n          children: [\"\\xA0 \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: \"css\",\n            name: \"contactType\",\n            checked: contactType === 'Personal',\n            className: \"contact-type-radio-button\",\n            value: \"Personal\",\n            onChange: this.onSelectContactType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), \"\\xA0 \", /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"personal\",\n            className: \"contact-type-label\",\n            children: \"Personal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.onUpdateContact = event => {\n      event.preventDefault();\n      const {\n        name,\n        id,\n        email,\n        contactNumber,\n        contactType\n      } = this.state;\n\n      if (name !== '' && email !== '' && contactType !== '' && contactNumber !== '') {\n        const newContact = {\n          id: id,\n          name: name,\n          email: email,\n          contact_number: contactNumber,\n          contact_type: contactType\n        };\n        this.validateContactDetails(newContact);\n      } else {\n        this.setState({\n          showSubmitError: true,\n          errorText: 'Please fill required details'\n        });\n      }\n    };\n\n    this.checkEmail = email => {\n      return emailRegex().test(email);\n    };\n\n    this.checkContactNumber = contactNumber => {\n      if (contactNumber.length === 10 && !isNaN(Number(contactNumber))) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.validateContactDetails = newContact => {\n      const {\n        email,\n        contactNumber\n      } = this.state;\n\n      if (this.checkEmail(email) && this.checkContactNumber(contactNumber)) {\n        this.setState({\n          errorText: \"\",\n          showSubmitError: false\n        }, this.updateContactDetails(newContact));\n      } else {\n        if (!this.checkEmail(email) && !this.checkContactNumber(contactNumber)) {\n          this.setState({\n            errorText: \"Please fill valid email, contact number\",\n            showSubmitError: true\n          });\n        } else if (!this.checkEmail(email)) {\n          this.setState({\n            errorText: \"Please fill valid email\",\n            showSubmitError: true\n          });\n        } else if (!this.checkContactNumber(contactNumber)) {\n          this.setState({\n            errorText: \"Please fill valid 10 digit contact number\",\n            showSubmitError: true\n          });\n        }\n      }\n    };\n\n    this.updateContactDetails = newContact => {\n      const {\n        id\n      } = this.state;\n      const currentContacts = JSON.parse(localStorage.getItem('contacts'));\n      const index = currentContacts.findIndex(contact => contact.id === id);\n      currentContacts.splice(index, 1, newContact);\n      const strigifiedData = JSON.stringify(currentContacts);\n      localStorage.setItem('contacts', strigifiedData);\n      this.displayToaster();\n      setTimeout(() => {\n        this.redirectToContactsPage();\n      }, 2000);\n    };\n\n    this.displayToaster = () => toast( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toaster-text\",\n      children: \"Contact Updated Succesfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 30\n    }, this), {\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n\n    this.redirectToContactsPage = () => {\n      const {\n        history\n      } = this.props;\n      history.push('/');\n    };\n  }\n\n  render() {\n    const {\n      showSubmitError,\n      errorText\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-contact-form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"add-contact-form\",\n          onSubmit: this.onUpdateContact,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"heading-text\",\n            children: \"Update Contact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: this.renderNameField()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: this.renderEmailField()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: this.renderContactNumberField()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: this.renderContactTypeOptions()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-contact-btn-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"update-contact-btn\",\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 11\n          }, this), showSubmitError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: [\"*\", errorText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default _c = withRouter(UpdateContact);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/apiiit-rkv/Desktop/contacts-project/src/components/UpdateContact/index.js"],"names":["withRouter","ToastContainer","toast","emailRegex","Component","Header","UpdateContact","state","id","name","email","contactNumber","contactType","showSubmitError","errorText","componentDidMount","match","props","params","contactId","selectedContactDetails","JSON","parse","localStorage","getItem","find","contact","setState","contact_type","contact_number","onChangeName","event","target","value","onChangeEmail","onChangeContactNumber","onSelectContactType","renderNameField","renderEmailField","renderContactNumberField","renderContactTypeOptions","onUpdateContact","preventDefault","newContact","validateContactDetails","checkEmail","test","checkContactNumber","length","isNaN","Number","updateContactDetails","currentContacts","index","findIndex","splice","strigifiedData","stringify","setItem","displayToaster","setTimeout","redirectToContactsPage","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","history","push","render"],"mappings":"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","sourcesContent":["\nimport { withRouter } from 'react-router-dom'\nimport { ToastContainer,toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport emailRegex from 'email-regex';\n\nimport {Component} from 'react'\nimport Header from '../Header'\nimport './index.css'\n\nclass UpdateContact extends Component {\n  state = {\n    id:'',\n    name: '',\n    email: '',\n    contactNumber:'',\n    contactType:'',\n    showSubmitError: false,\n    errorText:\"Please fill required details\"\n  }\ncomponentDidMount=()=>{\n  const {match} = this.props\n  const {params} = match\n  const {id:contactId} = params\n    const selectedContactDetails=JSON.parse(localStorage.getItem('contacts')).find(contact=>contact.id===contactId)\n    this.setState({\n        id:selectedContactDetails.id,\n        name:selectedContactDetails.name,\n        email:selectedContactDetails.email,\n        contactType:selectedContactDetails.contact_type,\n        contactNumber:selectedContactDetails.contact_number\n    })\n    \n}\n\n  onChangeName = event => {\n    this.setState({name: event.target.value})\n  }\n\n  onChangeEmail = event => {\n    this.setState({email: event.target.value})\n  }\n\n  onChangeContactNumber = event => {\n    this.setState({contactNumber: event.target.value})\n  }\n\n  onSelectContactType=(event)=>{\n    const { value } = event.target;\n    this.setState({\n      contactType: value\n    });\n}\n\n  renderNameField = () => {\n    const {name} = this.state\n    return (\n      <div className=\"contact-details\">\n        <label className=\"input-label\" htmlFor=\"name\">\n          NAME\n        </label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          className=\"name-input-field\"\n          value={name}\n          onChange={this.onChangeName}\n          placeholder=\"Name\"\n        />\n      </div>\n    )\n  }\n\n  renderEmailField = () => {\n    const {email} = this.state\n    return (\n      <div className=\"contact-details\">\n        <label className=\"input-label\" htmlFor=\"email\">\n          EMAIL\n        </label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          className=\"email-input-field\"\n          value={email}\n          onChange={this.onChangeEmail}\n          placeholder=\"Email\"\n        />\n      </div>\n    )\n  }\n\n  renderContactNumberField = () => {\n    const {contactNumber} = this.state\n    return (\n      <div className=\"contact-details\">\n        <label className=\"input-label\" htmlFor=\"contactNumber\">\n          CONTACT NUMBER\n        </label>\n        <input\n          type=\"text\"\n          id=\"contactNumber\"\n          className=\"contact-number-input-field\"\n          value={contactNumber}\n          onChange={this.onChangeContactNumber}\n          placeholder=\"Contact Number\"\n        />\n      </div>\n    )\n  }\n\n  renderContactTypeOptions = () => {\n      const {contactType}=this.state\n    return (\n        <div className=\"contact-details\" name=\"contactTypeOptions\">\n            <p className=\"contact-type\">CONTACT TYPE</p>\n            <div className=\"contact-type-option\">\n              <input type=\"radio\" id=\"business\" name=\"contactType\" checked={contactType==='Business'}  className=\"contact-type-radio-button\" value=\"Business\" onChange={this.onSelectContactType}/>\n              <label htmlFor=\"business\" className=\"contact-type-label\">Business</label>\n            </div>\n            <div  className=\"contact-type-option\">\n              <input type=\"radio\" id=\"css\" name=\"contactType\" checked={contactType==='Personal'} className=\"contact-type-radio-button\" value=\"Personal\" onChange={this.onSelectContactType}/>\n              <label htmlFor=\"personal\"  className=\"contact-type-label\">Personal</label>\n            </div>\n        </div>\n    )\n  }\n  onUpdateContact =(event)=>{\n      event.preventDefault()\n      const {name,id,email,contactNumber,contactType}=this.state\n      if(name!=='' && email!=='' && contactType!=='' && contactNumber!==''){\n        const newContact={\n          id:id,\n          name:name,\n          email:email,\n          contact_number:contactNumber,\n          contact_type:contactType,\n      }\n      this.validateContactDetails(newContact)\n      }\n      else{\n        this.setState({showSubmitError:true,errorText:'Please fill required details'})\n      }\n      \n    }\n\n    checkEmail=(email)=>{\n      return emailRegex().test(email);\n    }\n    checkContactNumber=(contactNumber)=>{\n    if(contactNumber.length===10 && !isNaN(Number(contactNumber))){\n      return true;\n    }\n    else{\n      return false;\n    }\n    }\n    validateContactDetails=(newContact)=>{\n      const {email,contactNumber} = this.state\n        if(this.checkEmail(email) && this.checkContactNumber(contactNumber)){\n          this.setState({errorText:\"\",showSubmitError:false},this.updateContactDetails(newContact))\n        }\n        else{\n          if(!this.checkEmail(email) && !this.checkContactNumber(contactNumber)){\n            this.setState({errorText:\"Please fill valid email, contact number\",showSubmitError:true})\n            }\n            else if(!this.checkEmail(email)){\n            this.setState({errorText:\"Please fill valid email\",showSubmitError:true})\n            }\n            else if(!this.checkContactNumber(contactNumber)){\n            this.setState({errorText:\"Please fill valid 10 digit contact number\",showSubmitError:true})\n            }\n        }\n    }\n\n    updateContactDetails=(newContact)=>{\n      const {id}=this.state\n      const currentContacts=JSON.parse(localStorage.getItem('contacts'))\n      const index=currentContacts.findIndex(contact=>contact.id===id)\n      \n      currentContacts.splice(index, 1, newContact);\n      const strigifiedData=JSON.stringify(currentContacts)\n      localStorage.setItem('contacts',strigifiedData)\n      this.displayToaster()\n      setTimeout(() => {\n        this.redirectToContactsPage()\n      }, 2000);\n      \n    }\n    displayToaster=()=>toast(<div className=\"toaster-text\">Contact Updated Succesfully!</div>,{\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      })\n    redirectToContactsPage=()=>{\n      const {history}=this.props\n      history.push('/')\n    }\n  render() {\n      const {showSubmitError,errorText}=this.state\n\n    return (\n      <>\n      <Header/>\n    <div className=\"add-contact-form-container\">\n        \n        <form className=\"add-contact-form\" onSubmit={this.onUpdateContact}>\n          <h1 className=\"heading-text\">Update Contact</h1>\n          <div className=\"input-container\">{this.renderNameField()}</div>\n          <div className=\"input-container\">{this.renderEmailField()}</div>\n          <div className=\"input-container\">{this.renderContactNumberField()}</div>\n          <div className=\"input-container\">{this.renderContactTypeOptions()}</div>\n          <div className=\"update-contact-btn-container\">\n          <button type=\"submit\" className=\"update-contact-btn\">\n            Update\n          </button>\n          </div>\n          \n          {showSubmitError && <p className=\"error-message\">*{errorText}</p>}\n        </form>\n        <ToastContainer />\n    </div>\n    </>\n    )\n  }\n}\n\nexport default withRouter(UpdateContact)"]},"metadata":{},"sourceType":"module"}